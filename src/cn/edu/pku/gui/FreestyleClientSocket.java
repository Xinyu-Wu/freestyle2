/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cn.edu.pku.gui;

import cn.edu.pku.datasource.FreestyleUser;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author wuxinyu
 */
public class FreestyleClientSocket extends javax.swing.JFrame {
    private DefaultListModel listModel;  
    private boolean isConnected = false;  
  
    private Socket socket;  
    private PrintWriter writer;  
    private BufferedReader reader;  
    private MessageThread messageThread;// 负责接收消息的线程  
    private Map<String, FreestyleUser> onlineUsers = new HashMap<>();// 所有在线用户  
    /**
     * Creates new form FreestyleClientSocket
     */
    public FreestyleClientSocket() {
        listModel = new DefaultListModel();
        initComponents();
        ListUsers.setModel(listModel);
    }
    
    // 执行发送  
    public void send() {  
        if (!isConnected) {  
            JOptionPane.showMessageDialog(this, "还没有连接服务器，无法发送消息！", "错误",  
                    JOptionPane.ERROR_MESSAGE);  
            return;  
        }  
        String message = TextArea.getText().trim();  
        if (message == null || message.equals("")) {  
            JOptionPane.showMessageDialog(this, "消息不能为空！", "错误",  
                    JOptionPane.ERROR_MESSAGE);  
            return;  
        }  
        sendMessage(this.getTitle() + "@" + "ALL" + "@" + message);  
        TextArea.setText(null);  
    }  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelConnfig = new javax.swing.JPanel();
        LabelServerIP = new javax.swing.JLabel();
        TextFieldServerIP = new javax.swing.JTextField();
        LabelPort = new javax.swing.JLabel();
        TextFieldPort = new javax.swing.JTextField();
        LabelUserID = new javax.swing.JLabel();
        LabelUserName = new javax.swing.JLabel();
        TextFieldUserID = new javax.swing.JTextField();
        TextFieldUserName = new javax.swing.JTextField();
        ButtonConnect = new javax.swing.JButton();
        ButtonDisconnect = new javax.swing.JButton();
        PanelUserList = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ListUsers = new javax.swing.JList<>();
        PanelChatMessages = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextChatMessages = new javax.swing.JTextArea();
        ButtonSend = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        PanelConnfig.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        LabelServerIP.setText("ServerIP:");

        TextFieldServerIP.setText("127.0.0.1");

        LabelPort.setText("Port:");

        TextFieldPort.setText("8000");

        LabelUserID.setText("UserID:");

        LabelUserName.setText("UserName:");

        TextFieldUserID.setText("10010");

        TextFieldUserName.setText("ChinaUnicom");

        ButtonConnect.setText("Connect");
        ButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConnectActionPerformed(evt);
            }
        });

        ButtonDisconnect.setText("Disconnect");
        ButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelConnfigLayout = new javax.swing.GroupLayout(PanelConnfig);
        PanelConnfig.setLayout(PanelConnfigLayout);
        PanelConnfigLayout.setHorizontalGroup(
            PanelConnfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelConnfigLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelConnfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelServerIP)
                    .addComponent(LabelUserID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelConnfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TextFieldServerIP, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(TextFieldUserID))
                .addGap(18, 18, 18)
                .addGroup(PanelConnfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelConnfigLayout.createSequentialGroup()
                        .addComponent(LabelPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelConnfigLayout.createSequentialGroup()
                        .addComponent(LabelUserName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldUserName)))
                .addGap(58, 58, 58)
                .addComponent(ButtonConnect)
                .addGap(26, 26, 26)
                .addComponent(ButtonDisconnect)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelConnfigLayout.setVerticalGroup(
            PanelConnfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelConnfigLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelConnfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PanelConnfigLayout.createSequentialGroup()
                        .addGroup(PanelConnfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelServerIP)
                            .addComponent(TextFieldServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelPort)
                            .addComponent(TextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelConnfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelUserID)
                            .addComponent(LabelUserName)
                            .addComponent(TextFieldUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFieldUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addComponent(ButtonDisconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        PanelUserList.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jScrollPane5.setViewportView(ListUsers);

        javax.swing.GroupLayout PanelUserListLayout = new javax.swing.GroupLayout(PanelUserList);
        PanelUserList.setLayout(PanelUserListLayout);
        PanelUserListLayout.setHorizontalGroup(
            PanelUserListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelUserListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelUserListLayout.setVerticalGroup(
            PanelUserListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelUserListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );

        PanelChatMessages.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        TextChatMessages.setColumns(20);
        TextChatMessages.setRows(5);
        jScrollPane2.setViewportView(TextChatMessages);

        ButtonSend.setText("Send");
        ButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSendActionPerformed(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane4.setViewportView(TextArea);

        javax.swing.GroupLayout PanelChatMessagesLayout = new javax.swing.GroupLayout(PanelChatMessages);
        PanelChatMessages.setLayout(PanelChatMessagesLayout);
        PanelChatMessagesLayout.setHorizontalGroup(
            PanelChatMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelChatMessagesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelChatMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(PanelChatMessagesLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonSend, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PanelChatMessagesLayout.setVerticalGroup(
            PanelChatMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelChatMessagesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelChatMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(ButtonSend, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelUserList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelChatMessages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(PanelConnfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelConnfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelUserList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PanelChatMessages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDisconnectActionPerformed
        // TODO add your handling code here:
        if (!isConnected) {  
            JOptionPane.showMessageDialog(this, "已处于断开状态，不要重复断开!",  
                    "错误", JOptionPane.ERROR_MESSAGE);  
            return;  
        }  
        try {  
            boolean flag = closeConnection();// 断开连接  
            if (flag == false) {  
                throw new Exception("断开连接发生异常！");  
            }  
            JOptionPane.showMessageDialog(this, "成功断开!");  
        } catch (Exception exc) {  
            JOptionPane.showMessageDialog(this, exc.getMessage(),  
                    "错误", JOptionPane.ERROR_MESSAGE);  
        } 
    }//GEN-LAST:event_ButtonDisconnectActionPerformed

    private void ButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSendActionPerformed
        // TODO add your handling code here:
        send();
    }//GEN-LAST:event_ButtonSendActionPerformed

    private void ButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonConnectActionPerformed
        // TODO add your handling code here:
        int port;  
        if (isConnected) {  
            JOptionPane.showMessageDialog(this, "已处于连接上状态，不要重复连接!",  
                    "错误", JOptionPane.ERROR_MESSAGE);  
            return;  
        }  
        try {  
            try {  
                port = Integer.parseInt(TextFieldPort.getText().trim());  
            } catch (NumberFormatException e2) {  
                throw new Exception("端口号不符合要求!端口为整数!");  
            }  
            String id = TextFieldUserID.getText().trim();
            String hostIp = TextFieldServerIP.getText().trim();  
            String name = TextFieldUserName.getText().trim();  
            if (name.equals("") || hostIp.equals("")) {  
                throw new Exception("姓名、服务器IP不能为空!");  
            }  
            boolean flag = connectServer(port, id, name, hostIp);  
            if (flag == false) {  
                throw new Exception("与服务器连接失败!");  
            }  
            this.setTitle(name);  
            JOptionPane.showMessageDialog(this, "成功连接!");  
        } catch (Exception exc) {  
            JOptionPane.showMessageDialog(this, exc.getMessage(),  
                    "错误", JOptionPane.ERROR_MESSAGE);  
        }  
    }//GEN-LAST:event_ButtonConnectActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (isConnected) {  
            closeConnection();// 关闭连接  
        }  
        System.exit(0);// 退出程序  �����  
    }//GEN-LAST:event_formWindowClosing

    public boolean connectServer(int port, String id, String name, String hostIp) {  
        // 连接服务器  
        try {  
            socket = new Socket(hostIp, port);// 根据端口号和服务器ip建立连接  
            writer = new PrintWriter(socket.getOutputStream());  
            reader = new BufferedReader(new InputStreamReader(socket  
                    .getInputStream()));  
            // 发送客户端用户基本信息(用户名和ip地址)  
            sendMessage(id + "@" + name + "@" + socket.getLocalAddress().toString());  
            // 开启接收消息的线程  
            messageThread = new MessageThread(reader, TextChatMessages);  
            messageThread.start();  
            isConnected = true;// 已经连接上了  
            return true;  
        } catch (Exception e) {  
            TextChatMessages.append("与端口号为：" + port + "    IP地址为：" + hostIp  
                    + "   的服务器连接失败!" + "\r\n");  
            isConnected = false;// 未连接上  
            return false;  
        }  
    }  
    
    public void sendMessage(String message) {  
        writer.println(message);  
        writer.flush();  
    }  
    
    public synchronized boolean closeConnection() {  
        try {  
            sendMessage("CLOSE");// 发送断开连接命令给服务器  
            messageThread.stop();// 停止接受消息线程  
            // 释放资源  
            if (reader != null) {  
                reader.close();  
            }  
            if (writer != null) {  
                writer.close();  
            }  
            if (socket != null) {  
                socket.close();  
            }  
            isConnected = false;  
            return true;  
        } catch (IOException e1) {  
            e1.printStackTrace();  
            isConnected = true;  
            return false;  
        }  
    }  
    
    class MessageThread extends Thread {  
        private BufferedReader reader;  
        private JTextArea textArea;  
  
        // 接收消息线程的构造方法  
        public MessageThread(BufferedReader reader, JTextArea textArea) {  
            this.reader = reader;  
            this.textArea = textArea;  
        }  
  
        // 被动的关闭连接  
        public synchronized void closeCon() throws Exception {  
            // 清空用户列表  
            listModel.removeAllElements();  
            // 被动的关闭连接释放资源  
            if (reader != null) {  
                reader.close();  
            }  
            if (writer != null) {  
                writer.close();  
            }  
            if (socket != null) {  
                socket.close();  
            }  
            isConnected = false;// 修改状态为断开  
        }  
  
        public void run() {  
            String message = "";  
            while (true) {  
                try {  
                    message = reader.readLine();  
                    StringTokenizer stringTokenizer = new StringTokenizer(  
                            message, "/@");  
                    String command = stringTokenizer.nextToken();// 命令  
                    if (command.equals("CLOSE"))// 服务器已关闭命令  
                    {  
                        textArea.append("服务器已关闭!\r\n");  
                        closeCon();// 被动的关闭连接  
                        return;// 结束线程  
                    } else if (command.equals("ADD")) {// 有用户上线更新在线列表  
                        String userid = "";
                        String username = "";  
                        String userIp = "";  
                        if ((userid = stringTokenizer.nextToken()) != null  
                                &&(username = stringTokenizer.nextToken()) != null  
                                && (userIp = stringTokenizer.nextToken()) != null) {  
                            FreestyleUser user = new FreestyleUser(userid, username, userIp);
                            onlineUsers.put(userid, user);  
                            listModel.addElement(username);  
                        }  
                    } else if (command.equals("DELETE")) {// 有用户下线更新在线列表  
                        String userid = stringTokenizer.nextToken();  
                        String username = stringTokenizer.nextToken();
                        FreestyleUser user = (FreestyleUser) onlineUsers.get(userid);  
                        onlineUsers.remove(userid, user);
                        listModel.removeElement(username);  
                    } else if (command.equals("USERLIST")) {// 加载在线用户列表  
                        int size = Integer  
                                .parseInt(stringTokenizer.nextToken());  
                        String userid = null;
                        String username = null;  
                        String userIp = null;  
                        for (int i = 0; i < size; i++) {  
                            userid = stringTokenizer.nextToken();
                            username = stringTokenizer.nextToken();  
                            userIp = stringTokenizer.nextToken();  
                            FreestyleUser user = new FreestyleUser(userid, username, userIp);  
                            onlineUsers.put(userid, user);  
                            listModel.addElement(username);  
                        }  
                    } else if (command.equals("MAX")) {// 人数已达上限  
                        textArea.append(stringTokenizer.nextToken()  
                                + stringTokenizer.nextToken() + "\r\n");  
                        closeCon();// 被动的关闭连接  
                        JOptionPane.showMessageDialog(this.textArea, "服务器缓冲区已满！", "错误",  
                                JOptionPane.ERROR_MESSAGE);  
                        return;// 结束线程  
                    } else {// 普通消息  
                        textArea.append(message + "\r\n");  
                    }  
                } catch (IOException e) {  
                    e.printStackTrace();  
                } catch (Exception e) {  
                    e.printStackTrace();  
                }  
            }  
        }  
    }  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FreestyleClientSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FreestyleClientSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FreestyleClientSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FreestyleClientSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FreestyleClientSocket().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonConnect;
    private javax.swing.JButton ButtonDisconnect;
    private javax.swing.JButton ButtonSend;
    private javax.swing.JLabel LabelPort;
    private javax.swing.JLabel LabelServerIP;
    private javax.swing.JLabel LabelUserID;
    private javax.swing.JLabel LabelUserName;
    private javax.swing.JList<String> ListUsers;
    private javax.swing.JPanel PanelChatMessages;
    private javax.swing.JPanel PanelConnfig;
    private javax.swing.JPanel PanelUserList;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JTextArea TextChatMessages;
    private javax.swing.JTextField TextFieldPort;
    private javax.swing.JTextField TextFieldServerIP;
    private javax.swing.JTextField TextFieldUserID;
    private javax.swing.JTextField TextFieldUserName;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    // End of variables declaration//GEN-END:variables

}
